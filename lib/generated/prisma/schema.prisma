// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  products      Product[]
  role          Role      @default(USER)
  addresses     Address[]
  orders        Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Role {
  USER
  ADMIN
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  images      Image[]
  userId      String      @db.ObjectId
  description String
  price       Int
  stock       Int
  ageId       String      @db.ObjectId
  categories  String[]
  isArchived  Boolean
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
  age  Age  @relation(fields: [ageId], references: [id])
}

model Age {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  key        String
  url        String
  productId  String?  @db.ObjectId
  categoryId String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product  Product?  @relation(fields: [productId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  city        String
  province    String
  subdistrict String
  phoneNumber String
  zipCode     String
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders Order[]
  user   User    @relation(fields: [userId], references: [id])
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  orderItems  OrderItem[]
  totalAmount Int
  status      Status      @default(PENDING)
  addressId   String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  address Address @relation(fields: [addressId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

enum Status {
  PENDING
  PAID
  SHIPPED
  COMPLETED
  CANCELED
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  productId String  @db.ObjectId
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}
